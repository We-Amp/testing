[
  {
    "TestName": "Client - Server",
    "Description": "This test creates an client and server"
  },
  {
    "create": "http2.server",
    "name": "h2s"
  },
  {
    "action": "h2s.start"
  },
  {
    "create": "http2.client",
    "name": "h2c"
  },
  {
    "action": "parallel",
    "list": [
      [
        {
          "action": "h2c.request",
          "url": "https://localhost:8080/test1.html",
          "name": "request1"
        },
        {
          "action": "waitfor",
          "event": "request1.ResponseReceived",
          "name": "request1response"
        },
        {
          "action": "expect",
          "value": "request1response.response_headers.:status",
          "expected": 200,
          "Description": "Status should be 200 OK"
        }
      ],
      [
        {
          "action": "waitfor",
          "event": "h2s.RequestReceived",
          "name": "h2srequest1"
        },
        {
          "action": "expect",
          "value": "h2srequest1.request_headers.:scheme",
          "expected": "https",
          "Description": "Scheme should be https"
        },
        {
          "action": "h2s.sendresponseheaders",
          "name": "responseHeader1"
        },
        {
          "action": "h2s.sendresponsebody",
          "data": "This is server",
          "name": "responseBody1"
        },
        {
          "action": "h2s.kill"
        }
      ]
    ]
  }
]
